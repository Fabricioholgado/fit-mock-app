install.packages("devtools")
install.packages("needs")
needs(c("dplyr", "flexdashboard", "inegiR", "rmarkdown", "ggplot2"))
library(needs)
needs(c("dplyr", "flexdashboard", "inegiR", "rmarkdown", "ggplot2"))
library(needs)
needs(c("dplyr", "flexdashboard", "inegiR", "rmarkdown", "ggplot2"))
needs(c(dplyr, flexdashboard, inegiR, rmarkdown, ggplot2))
needs(dplyr)
needs(inegiR)
needs(ggplot2)
needs(tidyquant)
needs(XLConnect)
needs(XLConnectJars)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_121')
needs(XLConnectJars)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_121')
needs(XLConnectJars)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_144')
needs(XLConnectJars)
needs(XLConnect)
needs(forecast)
needs(flexdashboard)
needs(treemap)
install_github("eflores89/eem")
library(devtools)
install_github("eflores89/eem")
install_github("jbkunst/highcharter")
needs(viridisLite)
install.packages("timevis")
install.packages("widgetframe")
fx()
want to watch me cum?
fxrate <- function(){
eur_btc <- jsonlite::fromJSON("https://api.coinbase.com/v2/prices/BTC-EUR/sell")
eur_btc <- as.numeric(eur_btc$data$amount)
eur_eth <- jsonlite::fromJSON("https://api.coinbase.com/v2/prices/ETH-EUR/sell")
eur_eth <- as.numeric(eur_eth$data$amount)
c(paste0("BTC:", eur_btc),
paste0("ETH:", eur_eth))
}
js
js
fxrate <- function(){
eur_btc <- jsonlite::fromJSON("https://api.coinbase.com/v2/prices/BTC-EUR/sell")
eur_btc <- as.numeric(eur_btc$data$amount)
eur_eth <- jsonlite::fromJSON("https://api.coinbase.com/v2/prices/ETH-EUR/sell")
eur_eth <- as.numeric(eur_eth$data$amount)
c(paste0("BTC:", eur_btc),
paste0("ETH:", eur_eth))
}
fxrate()
fx <- function(){
# get bitso prices
mxn_btc <- jsonlite::fromJSON("https://api.bitso.com/v3/ticker/?book=btc_mxn")
mxn_btc <- as.numeric(mxn_btc$payload$bid)
mxn_eth <- jsonlite::fromJSON("https://api.bitso.com/v3/ticker/?book=eth_mxn")
mxn_eth <- as.numeric(mxn_eth$payload$bid)
# get coinbase prices
eur_btc <- jsonlite::fromJSON("https://api.coinbase.com/v2/prices/BTC-EUR/sell")
eur_btc <- as.numeric(eur_btc$data$amount)
eur_eth <- jsonlite::fromJSON("https://api.coinbase.com/v2/prices/ETH-EUR/sell")
eur_eth <- as.numeric(eur_eth$data$amount)
fx_rates <- c(paste0("BTC: ",
format(mxn_btc/eur_btc, digits = 5),
paste0(" - ETH: ",
format(mxn_eth/eur_eth, digits = 5),
" - @: (BTC: ", format(mxn_btc, digits = 5), " / ", format(eur_btc, digits = 5),
") & (ETH: ", format(mxn_eth, digits = 5), " / ", format(eur_eth, digits = 5)), ")"))
fx_rates
}
fx()
fx()
fx()
> img <- earth_image(key,
+                    lon = coord_long,
+                    lat = coord_lat,
+                    date = "2016-04-18", plot = TRUE)
img <- earth_image(key, lon = coord_long, lat = coord_lat, date = "2016-04-18", plot = TRUE)
library(nasadata)
img <- earth_image(key, lon = coord_long, lat = coord_lat, date = "2016-04-18", plot = TRUE)
img
earth_image
shiny::runApp('C:/Users/eduar/Google Drive/R/fit-app')
runApp('C:/Users/eduar/Google Drive/R/fit-app')
rsconnect::deployApp(appName = "fitmock", account = "fitmockiesetest")
library(rsconnect)
rsconnect::deployApp(appName = "fitmock", account = "fitmockiesetest")
rsconnect::accounts()
rsconnect::deployApp(appName = "fitmock", account = "fitmockiesetest")
setwd("C:/Users/eduar/Google Drive/R/fit-app")
rsconnect::deployApp(appName = "fitmock", account = "fitmockiesetest")
